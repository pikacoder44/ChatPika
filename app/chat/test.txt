type Message = {
    id: string;
    role: "user" | "assistant";
    content: string;
  };

  const [message, setMessage] = useState("");
  const [messages, setMessages] = useState<Message[]>([]);
  const [loading, setLoading] = useState(false);

  const handleChat = async () => {
    if (!message.trim()) return;
    setLoading(true);

    // Add user message
    const newMessage: Message = {
      id: crypto.randomUUID(),
      role: "user",
      content: message,
    };
    setMessages((prev) => [...prev, newMessage]);
    setMessage("");

    try {
      // ğŸ‘‡ Instead of real API call, use hardcoded response
      // const res = await fetch("/api/chat", {
      //   method: "POST",
      //   headers: { "Content-Type": "application/json" },
      //   body: JSON.stringify({ message }),
      // });
      // const data = await res.json();
      // const aiResponse = data.response;

      const aiResponse = "Hello! I'm your hardcoded AI ğŸ¤–"; // mock

      // Add AI response
      setMessages((prev) => [
        ...prev,
        { id: crypto.randomUUID(), role: "assistant", content: aiResponse },
      ]);
    } catch (error: any) {
      setMessages((prev) => [
        ...prev,
        { id: crypto.randomUUID(), role: "assistant", content: "Error: " + error.message },
      ]);
    }
    setLoading(false);
  };